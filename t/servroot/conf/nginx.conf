worker_processes  1;
daemon off;
master_process on;
error_log /media/psf/g/idevz/code/www/vanilla/framework/motan/t/servroot/logs/error.log warn;
pid       /media/psf/g/idevz/code/www/vanilla/framework/motan/t/servroot/logs/nginx.pid;
env MOCKEAGAIN_VERBOSE;
env MOCKEAGAIN;
env MOCKEAGAIN_WRITE_TIMEOUT_PATTERN;
env LD_PRELOAD;
env LD_LIBRARY_PATH;
env DYLD_INSERT_LIBRARIES;
env DYLD_FORCE_FLAT_NAMESPACE;
#env LUA_PATH;
#env LUA_CPATH;

stream {
lua_package_path '/media/psf/g/idevz/code/www/vanilla/framework/?.lua;/media/psf/g/idevz/code/www/vanilla/framework/?/init.lua;./?.lua;/?.lua;/?/init.lua';
    server {
        listen 2001;

    preread_by_lua_block {
            local test_data = require "motan.t.lib.data"
            local data = test_data.get_data()
            local utils = require "motan.utils"
            local bytes = utils.pack_request_id(data)
            ngx.log(ngx.WARN, table.concat({string.byte(bytes, 1, -1)}, ","))
            ngx.say(table.concat({string.byte(bytes, 1, -1)}, ","))
            ngx.say("done")
    }
    content_by_lua return;

    }
}


http {
    access_log /media/psf/g/idevz/code/www/vanilla/framework/motan/t/servroot/logs/access.log;
    #access_log off;

    default_type text/plain;
    keepalive_timeout  68;



    server {
        listen          2000;
        server_name     'localhost';

        client_max_body_size 30M;
        #client_body_buffer_size 4k;

        # Begin preamble config...

        # End preamble config...

        # Begin test case config...
            lua_socket_log_errors off;

            location = /t {
                content_by_lua_block {
                    local sock, err = ngx.socket.tcp()
                    assert(sock, err)

                    local ok, err = sock:connect("127.0.0.1", 2001)
                    if not ok then
                        ngx.say("connect to stream server error: ", err)
                        return
                    end
                    local f = assert(io.open('t/tmp/data2.txt', 'r'))
                    local data = assert(f:read("*a"))
                    assert(f:close())
                    local bytes, err = sock:send(data)
                    if not bytes then
                        ngx.say("send stream request error: ", err)
                        return
                    end

                    local data, err = sock:receive("*a")
                    if not data then
                        sock:close()
                        ngx.say("receive stream response error: ", err)
                        return
                    end
                    ngx.print(data)
                }
            }

        # End test case config.

        location / {
            root /media/psf/g/idevz/code/www/vanilla/framework/motan/t/servroot/html;
            index index.html index.htm;
        }
    }
    server {
        listen          2000;
        server_name     'Test-Nginx';

        location = /ver {
            return 200 'cHKYJrrX_Z';
        }
    }


}



#timer_resolution 100ms;

events {
    accept_mutex off;

    worker_connections  64;
}
env ASAN_OPTIONS;
